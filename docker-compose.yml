version: '3.8'

services:
  # Base de datos PostgreSQL con pgvector
  db:
    image: ankane/pgvector:latest
    container_name: tesla_cotizador_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tesla_cotizador
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/init-vector.sql:/docker-entrypoint-initdb.d/init-vector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tesla_cotizador"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tesla_network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tesla_cotizador_backend
    restart: always
    command: >
      bash -c "
      echo 'Esperando a que la base de datos esté lista...' &&
      until pg_isready -h db -p 5432 -U postgres; do
        echo 'Esperando a la base de datos...';
        sleep 2;
      done &&
      alembic upgrade head &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/tesla_cotizador
      - PROD_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/tesla_cotizador_prod
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CHROMA_SERVER_HOST=chromadb
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - ./backend:/app
      - ./backend/storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tesla_network

  # ChromaDB (Vector Database para RAG)
  chromadb:
    image: chromadb/chroma:latest
    container_name: tesla_cotizador_chromadb
    restart: always
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS=admin:admin
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.basic.BasicAuthServerProvider
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.basic.BasicAuthServerProvider
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tesla_network

  # Frontend React (opcional en producción)
  frontend:
    build: ./frontend
    container_name: tesla_cotizador_frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - tesla_network

volumes:
  postgres_data:
    driver: local
  chroma_data:
    driver: local

networks:
  tesla_network:
    driver: bridge